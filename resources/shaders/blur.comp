#version 450

const float PI = 3.14159265359;
const float D_PI = PI * 2.;
const float HALF_PI = PI / 2.;
const float SQRT2 = sqrt(2);

#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))

#define CIRCULAR_SAMPLE

// layout( local_size_x = 1, local_size_y = 1) in;

layout (push_constant) uniform params_t
{
    mat4 mProjView;
    mat4 mModel;
} params;

layout(binding = 0, set = 0) uniform sampler2D mainViewDepth;
layout(binding = 1, set = 0) uniform sampler2D ssaoRes;
layout(binding = 2, set = 0) writeonly uniform image2D blurredSsaoRes;

vec3 getWorldPos(vec2 uv) {
    vec4 viewSpace = inverse(params.mProjView) * vec4(uv * 2. - 1., texture(mainViewDepth, uv).x, 1.);
    return viewSpace.xyz / viewSpace.w;
}

// https://www.shadertoy.com/view/4djSRW
//----------------------------------------------------------------------------------------
///  3 out, 3 in...
vec3 hash33(vec3 p3)
{
	p3 = fract(p3 * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy + p3.yxx)*p3.zyx);
}

//  1 out, 3 in...
float hash13(vec3 p3)
{
	p3  = fract(p3 * .1031);
    p3 += dot(p3, p3.zyx + 31.32);
    return fract((p3.x + p3.y) * p3.z);
}

void main(){
    ivec2 pixelLocation = ivec2(gl_GlobalInvocationID.xy);
    ivec2 resultSize = ivec2(imageSize(blurredSsaoRes));

    if (pixelLocation.x >= resultSize.x || pixelLocation.y >= resultSize.y)
    {
        return;
    }

    vec2 uv = (vec2(pixelLocation) + 0.5) / vec2(resultSize);

    vec2 pixOffset = vec2(1.) / vec2(resultSize);

    vec3 centerPos = getWorldPos(uv);

    float curDepth = texture(mainViewDepth, uv).x;
    const float THRESHOLD = 0.001;

    float mean = 0.;
    const int FILTER = 4;
    const int D_FILTER = 2 * FILTER + 1;
    float cnt = 0.;
    for (int i = -FILTER; i <= FILTER; ++i) {
        for (int j = -FILTER; j <= FILTER; ++j) {
            vec2 offUV = pixOffset * vec2(i, j);
            if (abs(texture(mainViewDepth, uv + offUV).x - curDepth) < THRESHOLD) {
                cnt += 1.;
                mean += texture(ssaoRes, uv + offUV).x;
            }
        }
    }

    imageStore(blurredSsaoRes, pixelLocation, vec4(mean / cnt));
}